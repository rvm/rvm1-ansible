name: CI
on:
  push:
    branches:
      - develop
      - main
      - master
  pull_request:
  schedule:
    - cron: '46 3 20 * *'
jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        playbook:
          - user.yml
          - root.yml
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: tests
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v2
        with:
          cache: 'pip'
          cache-dependency-path: |
            .github/workflows/tests.yml

        # Docker Image Caching: Step 1
        # Pull the latest image to build, and avoid caching pull-only images.
        # (docker pull is faster than caching in most cases.)
      - run: docker-compose pull

        # Docker Image Caching: Step 2
        # In this step, this action saves a list of existing images,
        # the cache is created without them in the post run.
        # It also restores the cache if it exists.
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

        # Docker Image Caching: Step 3
      - name: Launch containers
      - run: docker-compose up --build -d

        # Run the tests
      - name: Run Ansible on all containers
        run: ansible-playbook ${{ matrix.playbook }}

      - name: Shut down containers
        run: docker-compose down

    # Docker Image Caching: Step 4
    # Finally a post-run action of satackey/action-docker-layer-caching,
    # which is the process of saving the cache, will be executed automatically
